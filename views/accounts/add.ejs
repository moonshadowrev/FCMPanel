<%- include('../partials/csrf') %>
<% 
  // Set active tab for navigation highlighting
  var activeTab = 'accounts';
%>

<!-- Skip to main content -->
<a href="#add-account-content" class="skip-link">Skip to add account form</a>

<div class="container-fluid" id="add-account-content">
  <!-- Page Header -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="d-flex justify-content-between align-items-center">
        <div>
          <h1 class="h2 mb-2">
            <i class="fas fa-plus-circle me-2" aria-hidden="true"></i>
            Add Firebase Account
          </h1>
          <p class="lead text-muted mb-0">Connect a new Firebase project for FCM notifications</p>
        </div>
        <div>
          <a href="/accounts" class="btn btn-outline-secondary" aria-label="Back to accounts list">
            <i class="fas fa-arrow-left me-1" aria-hidden="true"></i>
            <span class="d-none d-sm-inline">Back to Accounts</span>
          </a>
        </div>
      </div>
    </div>
  </div>

  <div class="row justify-content-center">
    <div class="col-xl-8 col-lg-10">
      <!-- Main Form Card -->
      <div class="card" role="region" aria-labelledby="add-account-form-title">
        <div class="card-header">
          <h5 id="add-account-form-title" class="mb-0">
            <i class="fas fa-fire me-2" aria-hidden="true"></i>
            Firebase Account Configuration
          </h5>
        </div>
        <div class="card-body">
          <!-- Flash Messages -->
          <div class="flash-messages" role="region" aria-label="Status messages">
            <% if(typeof error_msg !== 'undefined' && error_msg !== '') { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert" aria-live="assertive">
              <i class="fas fa-exclamation-circle me-2" aria-hidden="true"></i>
              <span class="sr-only">Error:</span>
              <%= error_msg %>
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close error message"></button>
            </div>
            <% } %>

            <% if(typeof success_msg !== 'undefined' && success_msg !== '') { %>
            <div class="alert alert-success alert-dismissible fade show" role="alert" aria-live="polite">
              <i class="fas fa-check-circle me-2" aria-hidden="true"></i>
              <span class="sr-only">Success:</span>
              <%= success_msg %>
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close success message"></button>
            </div>
            <% } %>
          </div>

          <form method="POST" action="/accounts/add" id="add-account-form" 
                data-needs-validation novalidate role="form" aria-label="Add Firebase account form">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            
            <!-- Account Details Section -->
            <fieldset class="mb-4">
              <legend class="h6 mb-3">
                <i class="fas fa-id-card me-2" aria-hidden="true"></i>
                Account Details
              </legend>
              
              <div class="row">
                <div class="col-md-6 mb-3">
                  <label for="name" class="form-label">
                    Account Name
                    <span class="text-danger" aria-label="required">*</span>
                  </label>
                  <input type="text" 
                         class="form-control" 
                         id="name" 
                         name="name" 
                         required
                         maxlength="100"
                         placeholder="My Firebase Project"
                         aria-describedby="name-help">
                  <div id="name-help" class="form-text">
                    <i class="fas fa-info-circle me-1" aria-hidden="true"></i>
                    A friendly name to identify this Firebase account
                  </div>
                  <div class="invalid-feedback" role="alert"></div>
                </div>
                
                <div class="col-md-6 mb-3">
                  <label for="projectId" class="form-label">
                    Project ID
                    <span class="text-danger" aria-label="required">*</span>
                  </label>
                  <input type="text" 
                         class="form-control" 
                         id="projectId" 
                         name="projectId" 
                                                  required
                         maxlength="63"
                         placeholder="my-firebase-project"
                         aria-describedby="project-id-help">
                  <div id="project-id-help" class="form-text">
                    <i class="fas fa-info-circle me-1" aria-hidden="true"></i>
                    Firebase project ID (lowercase letters, numbers, and hyphens only)
                  </div>
                  <div class="invalid-feedback" role="alert"></div>
                </div>
              </div>
            </fieldset>

            <!-- Service Account Section -->
            <fieldset class="mb-4">
              <legend class="h6 mb-3">
                <i class="fas fa-key me-2" aria-hidden="true"></i>
                Service Account Credentials
              </legend>
              
              <div class="mb-3">
                <label for="clientEmail" class="form-label">
                  Client Email
                  <span class="text-danger" aria-label="required">*</span>
                </label>
                <input type="email" 
                       class="form-control" 
                       id="clientEmail" 
                       name="clientEmail" 
                       required
                       placeholder="firebase-adminsdk-xxxxx@my-project.iam.gserviceaccount.com"
                       aria-describedby="client-email-help">
                <div id="client-email-help" class="form-text">
                  <i class="fas fa-info-circle me-1" aria-hidden="true"></i>
                  Service account email from your Firebase service account JSON
                </div>
                <div class="invalid-feedback" role="alert"></div>
              </div>
              
              <div class="mb-3">
                <label for="privateKey" class="form-label">
                  Private Key
                  <span class="text-danger" aria-label="required">*</span>
                </label>
                <textarea class="form-control" 
                          id="privateKey" 
                          name="privateKey" 
                          rows="8" 
                          required
                          placeholder="-----BEGIN PRIVATE KEY-----&#10;MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC...&#10;-----END PRIVATE KEY-----"
                          aria-describedby="private-key-help"></textarea>
                <div id="private-key-help" class="form-text">
                  <i class="fas fa-info-circle me-1" aria-hidden="true"></i>
                  Complete private key from your service account JSON (including BEGIN/END lines)
                </div>
                <div class="invalid-feedback" role="alert"></div>
              </div>
            </fieldset>

            <!-- Account Options Section -->
            <fieldset class="mb-4">
              <legend class="h6 mb-3">
                <i class="fas fa-cogs me-2" aria-hidden="true"></i>
                Account Options
              </legend>
              
              <div class="form-check form-switch">
                <input class="form-check-input" 
                       type="checkbox" 
                       id="isDefault" 
                       name="isDefault"
                       aria-describedby="is-default-help">
                <label class="form-check-label fw-medium" for="isDefault">
                  <i class="fas fa-star me-1" aria-hidden="true"></i>
                  Set as default account
                </label>
                <div id="is-default-help" class="form-text">
                  If checked, this account will be used as the default for sending notifications
                </div>
              </div>
            </fieldset>

            <!-- Form Actions -->
            <div class="d-flex flex-column flex-md-row gap-2 justify-content-md-end">
              <a href="/accounts" class="btn btn-outline-secondary" aria-label="Cancel and return to accounts list">
                <i class="fas fa-times me-1" aria-hidden="true"></i>
                Cancel
              </a>
              <button type="button" class="btn btn-outline-info" id="testConnection" 
                      aria-label="Test connection with provided credentials">
                <i class="fas fa-plug me-1" aria-hidden="true"></i>
                Test Connection
              </button>
              <button type="submit" class="btn btn-primary" id="submitButton"
                      aria-label="Add Firebase account">
                <i class="fas fa-plus me-1" aria-hidden="true"></i>
                Add Account
              </button>
            </div>
          </form>
        </div>
      </div>

      <!-- Help and Instructions Card -->
      <div class="card mt-4" role="region" aria-labelledby="help-title">
        <div class="card-header">
          <h5 id="help-title" class="mb-0">
            <i class="fas fa-question-circle me-2" aria-hidden="true"></i>
            How to Get Firebase Credentials
          </h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-lg-8">
              <h6 class="text-muted text-uppercase mb-3">
                <i class="fas fa-list-ol me-1" aria-hidden="true"></i>
                Step-by-Step Instructions
              </h6>
              <ol class="list-group list-group-numbered">
                <li class="list-group-item d-flex align-items-start">
                  <div class="ms-2 me-auto">
                    <div class="fw-bold">Go to Firebase Console</div>
                    <small class="text-muted">Visit the Firebase Console and select your project</small>
                  </div>
                  <span class="badge bg-primary rounded-pill">1</span>
                </li>
                <li class="list-group-item d-flex align-items-start">
                  <div class="ms-2 me-auto">
                    <div class="fw-bold">Access Project Settings</div>
                    <small class="text-muted">Click the gear icon and go to Project Settings</small>
                  </div>
                  <span class="badge bg-primary rounded-pill">2</span>
                </li>
                <li class="list-group-item d-flex align-items-start">
                  <div class="ms-2 me-auto">
                    <div class="fw-bold">Service Accounts Tab</div>
                    <small class="text-muted">Navigate to the Service Accounts tab</small>
                  </div>
                  <span class="badge bg-primary rounded-pill">3</span>
                </li>
                <li class="list-group-item d-flex align-items-start">
                  <div class="ms-2 me-auto">
                    <div class="fw-bold">Generate Private Key</div>
                    <small class="text-muted">Click "Generate new private key" button</small>
                  </div>
                  <span class="badge bg-primary rounded-pill">4</span>
                </li>
                <li class="list-group-item d-flex align-items-start">
                  <div class="ms-2 me-auto">
                    <div class="fw-bold">Download & Extract</div>
                    <small class="text-muted">Download the JSON file and copy the values to this form</small>
                  </div>
                  <span class="badge bg-primary rounded-pill">5</span>
                </li>
              </ol>
            </div>
            
            <div class="col-lg-4">
              <h6 class="text-muted text-uppercase mb-3">
                <i class="fas fa-shield-alt me-1" aria-hidden="true"></i>
                Security Notes
              </h6>
              <div class="alert alert-warning">
                <h6 class="alert-heading">
                  <i class="fas fa-exclamation-triangle me-2" aria-hidden="true"></i>
                  Important
                </h6>
                <ul class="mb-0 small">
                  <li>Keep your service account key secure</li>
                  <li>Never commit credentials to version control</li>
                  <li>Use environment variables in production</li>
                  <li>Regularly rotate your service account keys</li>
                </ul>
              </div>
              
              <div class="d-grid">
                <a href="https://console.firebase.google.com" 
                   target="_blank" 
                   rel="noopener noreferrer"
                   class="btn btn-outline-primary"
                   aria-label="Open Firebase Console in new tab">
                  <i class="fas fa-external-link-alt me-1" aria-hidden="true"></i>
                  Open Firebase Console
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Test Connection Modal -->
<div class="modal fade" id="testConnectionModal" tabindex="-1" 
     aria-labelledby="testConnectionModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="testConnectionModalLabel">
          <i class="fas fa-plug me-2" aria-hidden="true"></i>
          Connection Test
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" 
                aria-label="Close connection test"></button>
      </div>
      <div class="modal-body">
        <div class="text-center">
          <div id="test-loading" class="d-none">
            <div class="spinner-border text-primary mb-3" role="status">
              <span class="sr-only">Testing connection...</span>
            </div>
            <p>Testing Firebase connection...</p>
          </div>
          
          <div id="test-success" class="d-none">
            <i class="fas fa-check-circle fa-3x text-success mb-3" aria-hidden="true"></i>
            <h6 class="text-success">Connection Successful!</h6>
            <p class="text-muted">Your Firebase credentials are valid and working.</p>
            <div id="test-success-details"></div>
          </div>
          
          <div id="test-error" class="d-none">
            <i class="fas fa-times-circle fa-3x text-danger mb-3" aria-hidden="true"></i>
            <h6 class="text-danger">Connection Failed</h6>
            <p class="text-muted" id="test-error-message">Unable to connect with the provided credentials.</p>
            <div id="test-error-details"></div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-1" aria-hidden="true"></i>
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Validation Styling -->
<style>
/* Bootstrap-compatible form validation styles */
.was-validated .form-control:invalid,
.form-control.is-invalid {
  border-color: #dc3545;
  padding-right: calc(1.5em + 0.75rem);
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='m5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right calc(0.375em + 0.1875rem) center;
  background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.was-validated .form-control:invalid:focus,
.form-control.is-invalid:focus {
  border-color: #dc3545;
  box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
}

.was-validated .form-control:valid,
.form-control.is-valid {
  border-color: #198754;
  padding-right: calc(1.5em + 0.75rem);
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='m2.3 6.73.4.36 3.2-3.38-.4-.36-2.8 2.96-1.2-1.27-.4.36 1.6 1.69z'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right calc(0.375em + 0.1875rem) center;
  background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.was-validated .form-control:valid:focus,
.form-control.is-valid:focus {
  border-color: #198754;
  box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25);
}

/* Invalid feedback styling */
.invalid-feedback {
  display: none;
  width: 100%;
  margin-top: 0.25rem;
  font-size: 0.875em;
  color: #dc3545;
  font-weight: 500;
}

.was-validated .form-control:invalid ~ .invalid-feedback,
.form-control.is-invalid ~ .invalid-feedback {
  display: block;
}

.valid-feedback {
  display: none;
  width: 100%;
  margin-top: 0.25rem;
  font-size: 0.875em;
  color: #198754;
  font-weight: 500;
}

.was-validated .form-control:valid ~ .valid-feedback,
.form-control.is-valid ~ .valid-feedback {
  display: block;
}

/* Textarea specific styles */
.was-validated textarea:invalid,
textarea.is-invalid {
  border-color: #dc3545;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='m5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: top calc(0.375em + 0.1875rem) right calc(0.375em + 0.1875rem);
  background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.was-validated textarea:valid,
textarea.is-valid {
  border-color: #198754;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='m2.3 6.73.4.36 3.2-3.38-.4-.36-2.8 2.96-1.2-1.27-.4.36 1.6 1.69z'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: top calc(0.375em + 0.1875rem) right calc(0.375em + 0.1875rem);
  background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

/* Dark theme support */
[data-bs-theme="dark"] .invalid-feedback {
  color: #ea868f;
}

[data-bs-theme="dark"] .valid-feedback {
  color: #75b798;
}

/* Highlight the field that's currently being validated */
.form-control:focus.is-invalid {
  animation: shake 0.3s ease-in-out;
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-2px); }
  75% { transform: translateX(2px); }
}
</style>

<!-- Enhanced JavaScript -->
<script>
(function() {
  'use strict';

  // Integration with FCM Dashboard
  const FCM = window.FCMDashboard?.FCM || {};

  // HTML escaping function to prevent XSS
  function escapeHtml(text) {
    const map = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#039;'
    };
    return text ? text.toString().replace(/[&<>"']/g, function(m) { return map[m]; }) : '';
  }

  // Simple alert notification fallback
  function showSimpleAlert(message, type = 'info') {
    // Remove any existing simple alerts
    const existingAlert = document.querySelector('.simple-validation-alert');
    if (existingAlert) {
      existingAlert.remove();
    }

    // Create alert element
    const alert = document.createElement('div');
    alert.className = `alert alert-${type === 'warning' ? 'warning' : (type === 'error' ? 'danger' : 'info')} alert-dismissible fade show simple-validation-alert`;
    alert.style.position = 'fixed';
    alert.style.top = '20px';
    alert.style.right = '20px';
    alert.style.zIndex = '9999';
    alert.style.maxWidth = '400px';
    alert.innerHTML = `
      <i class="fas fa-${type === 'error' ? 'exclamation-triangle' : (type === 'warning' ? 'exclamation-circle' : 'info-circle')} me-2"></i>
      ${escapeHtml(message)}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;

    // Add to page
    document.body.appendChild(alert);

    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (alert.parentNode) {
        alert.remove();
      }
    }, 5000);
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    initAddAccountPage();
  });

  /**
   * Initialize add account page functionality
   */
  function initAddAccountPage() {
    initFormValidation();
    initTestConnection();
    initFormEnhancements();
    
    // Integrate with FCM tooltips if available
    if (FCM.ui?.initTooltips) {
      FCM.ui.initTooltips();
    }
  }

  /**
   * Initialize enhanced form validation
   */
  function initFormValidation() {
    const form = document.getElementById('add-account-form');
    if (!form) return;

    // Form submission validation
    form.addEventListener('submit', function(e) {
      const isFormValid = validateForm();
      
      if (!isFormValid) {
        e.preventDefault();
        e.stopPropagation();
        
        // Focus on first invalid field
        const firstInvalid = form.querySelector('.is-invalid');
        if (firstInvalid) {
          // Get the error message from the feedback element
          const feedback = firstInvalid.parentNode.querySelector('.invalid-feedback');
          const errorMessage = feedback ? feedback.textContent : 'Please fix the validation errors';
          
          // Show toast notification
          if (window.FCMDashboard?.FCM?.ui?.showToast) {
            window.FCMDashboard.FCM.ui.showToast(errorMessage, 'error');
          } else {
            // Fallback: create a simple alert notification
            showSimpleAlert(errorMessage, 'error');
          }
          
          firstInvalid.focus();
          firstInvalid.scrollIntoView({ 
            behavior: FCM.state?.reducedMotion ? 'auto' : 'smooth',
            block: 'center' 
          });
        } else {
          // Show general validation error if no specific field found
          if (window.FCMDashboard?.FCM?.ui?.showToast) {
            window.FCMDashboard.FCM.ui.showToast('Please check all required fields', 'error');
          } else {
            // Fallback: create a simple alert notification
            showSimpleAlert('Please check all required fields', 'error');
          }
        }
      } else {
        // Add loading state
        const submitButton = form.querySelector('#submitButton');
        if (submitButton && FCM.forms?.addLoadingState) {
          FCM.forms.addLoadingState($(submitButton));
        }
      }
      
      form.classList.add('was-validated');
    });

    // Real-time field validation (silent - no alerts during typing)
    form.querySelectorAll('input, textarea').forEach(field => {
      field.addEventListener('blur', function() {
        validateFieldSilent(this);
      });
      
      field.addEventListener('input', function() {
        if (this.classList.contains('is-invalid')) {
          validateFieldSilent(this);
        }
      });
      
      // Also validate on change for select/radio inputs
      field.addEventListener('change', function() {
        validateFieldSilent(this);
      });
    });
  }

  /**
   * Validate the entire form
   */
  function validateForm() {
    const form = document.getElementById('add-account-form');
    let isValid = true;

    // Clear previous validation
    form.querySelectorAll('.is-valid, .is-invalid').forEach(el => {
      el.classList.remove('is-valid', 'is-invalid');
    });
    
    form.querySelectorAll('.invalid-feedback').forEach(el => {
      el.textContent = '';
    });

    // Validate each field
    form.querySelectorAll('input[required], textarea[required]').forEach(field => {
      if (!validateField(field)) {
        isValid = false;
      }
    });

    return isValid;
  }

  /**
   * Validate individual field (silent version for real-time validation)
   */
  function validateFieldSilent(field) {
    const value = field.value.trim();
    let isValid = true;
    let errorMessage = '';

    // Clear previous state
    field.classList.remove('is-valid', 'is-invalid');
    const feedback = field.parentNode.querySelector('.invalid-feedback');
    if (feedback) feedback.textContent = '';

    // Required field validation
    if (field.hasAttribute('required') && !value) {
      isValid = false;
      errorMessage = `${getFieldLabel(field)} is required`;
    }
    // Specific field validations
    else if (field.id === 'name' && value) {
      if (value.length < 2) {
        isValid = false;
        errorMessage = 'Account name must be at least 2 characters long';
      } else if (value.length > 100) {
        isValid = false;
        errorMessage = 'Account name must not exceed 100 characters';
      }
    }
    else if (field.id === 'projectId' && value) {
      // Check if project ID is valid using character-by-character validation
      let hasInvalidChar = false;
      for (let i = 0; i < value.length; i++) {
        const char = value[i];
        if (!/[a-z]/.test(char) && !/[0-9]/.test(char) && char !== '-') {
          hasInvalidChar = true;
          break;
        }
      }
      if (hasInvalidChar || value.includes('--') || value.startsWith('-') || value.endsWith('-')) {
        isValid = false;
        errorMessage = 'Project ID can only contain lowercase letters, numbers, and hyphens';
      } else if (value.length < 4 || value.length > 63) {
        isValid = false;
        errorMessage = 'Project ID must be between 4 and 63 characters';
      }
    }
    else if (field.id === 'clientEmail' && value) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.iam\.gserviceaccount\.com$/;
      if (!emailRegex.test(value)) {
        isValid = false;
        errorMessage = 'Must be a valid service account email ending with .iam.gserviceaccount.com';
      }
    }
    else if (field.id === 'privateKey' && value) {
      if (!value.includes('-----BEGIN PRIVATE KEY-----') || !value.includes('-----END PRIVATE KEY-----')) {
        isValid = false;
        errorMessage = 'Private key must include BEGIN and END markers';
      } else if (value.length < 500) {
        isValid = false;
        errorMessage = 'Private key appears to be incomplete';
      }
    }

    // Apply validation styling (silent - no alerts)
    if (isValid) {
      field.classList.add('is-valid');
    } else {
      field.classList.add('is-invalid');
      
      if (feedback) {
        feedback.textContent = errorMessage;
        feedback.style.display = 'block';
      }
    }

    return isValid;
  }

  /**
   * Validate individual field with alerts (for form submission)
   */
  function validateField(field) {
    const value = field.value.trim();
    let isValid = true;
    let errorMessage = '';

    // Clear previous state
    field.classList.remove('is-valid', 'is-invalid');
    const feedback = field.parentNode.querySelector('.invalid-feedback');
    if (feedback) feedback.textContent = '';

    // Required field validation
    if (field.hasAttribute('required') && !value) {
      isValid = false;
      errorMessage = `${getFieldLabel(field)} is required`;
    }
    // Specific field validations
    else if (field.id === 'name' && value) {
      if (value.length < 2) {
        isValid = false;
        errorMessage = 'Account name must be at least 2 characters long';
      } else if (value.length > 100) {
        isValid = false;
        errorMessage = 'Account name must not exceed 100 characters';
      }
    }
    else if (field.id === 'projectId' && value) {
      // Check if project ID is valid using character-by-character validation
      let hasInvalidChar = false;
      for (let i = 0; i < value.length; i++) {
        const char = value[i];
        if (!/[a-z]/.test(char) && !/[0-9]/.test(char) && char !== '-') {
          hasInvalidChar = true;
          break;
        }
      }
      if (hasInvalidChar || value.includes('--') || value.startsWith('-') || value.endsWith('-')) {
        isValid = false;
        errorMessage = 'Project ID can only contain lowercase letters, numbers, and hyphens';
      } else if (value.length < 4 || value.length > 63) {
        isValid = false;
        errorMessage = 'Project ID must be between 4 and 63 characters';
      }
    }
    else if (field.id === 'clientEmail' && value) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.iam\.gserviceaccount\.com$/;
      if (!emailRegex.test(value)) {
        isValid = false;
        errorMessage = 'Must be a valid service account email ending with .iam.gserviceaccount.com';
      }
    }
    else if (field.id === 'privateKey' && value) {
      if (!value.includes('-----BEGIN PRIVATE KEY-----') || !value.includes('-----END PRIVATE KEY-----')) {
        isValid = false;
        errorMessage = 'Private key must include BEGIN and END markers';
      } else if (value.length < 500) {
        isValid = false;
        errorMessage = 'Private key appears to be incomplete';
      }
    }

    // Apply validation styling (with alerts for form submission)
    if (isValid) {
      field.classList.add('is-valid');
    } else {
      field.classList.add('is-invalid');
      
      if (feedback) {
        feedback.textContent = errorMessage;
        feedback.style.display = 'block';
      }
    }

    return isValid;
  }

  /**
   * Get user-friendly field label
   */
  function getFieldLabel(field) {
    const label = document.querySelector(`label[for="${field.id}"]`);
    return label ? label.textContent.replace('*', '').trim() : 
           field.name.charAt(0).toUpperCase() + field.name.slice(1);
  }

  /**
   * Initialize test connection functionality
   */
  function initTestConnection() {
    const testButton = document.getElementById('testConnection');
    const modal = new bootstrap.Modal(document.getElementById('testConnectionModal'));
    
    testButton?.addEventListener('click', function() {
      // Validate required fields first
      const form = document.getElementById('add-account-form');
      const requiredFields = ['projectId', 'clientEmail', 'privateKey'];
      let hasErrors = false;
      
      requiredFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (!field.value.trim()) {
          validateFieldSilent(field);
          hasErrors = true;
        }
      });
      
      if (hasErrors) {
        const errorMessage = 'Please fill in all required fields before testing';
        if (window.FCMDashboard?.FCM?.ui?.showToast) {
          window.FCMDashboard.FCM.ui.showToast(errorMessage, 'warning');
        } else {
          showSimpleAlert(errorMessage, 'warning');
        }
        return;
      }
      
      // Show modal and start test
      modal.show();
      performConnectionTest();
    });
  }

  /**
   * Perform real connection test
   */
  function performConnectionTest() {
    const loadingDiv = document.getElementById('test-loading');
    const successDiv = document.getElementById('test-success');
    const errorDiv = document.getElementById('test-error');
    
    // Reset states
    [loadingDiv, successDiv, errorDiv].forEach(div => {
      div.classList.add('d-none');
    });
    
    // Show loading
    loadingDiv.classList.remove('d-none');
    
    // Get form data
    const projectId = document.getElementById('projectId').value.trim();
    const clientEmail = document.getElementById('clientEmail').value.trim();
    const privateKey = document.getElementById('privateKey').value.trim();
    const csrfToken = document.querySelector('input[name="_csrf"]').value;
    
    // Make AJAX request to test credentials
    fetch('/accounts/test-credentials', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({
        projectId,
        clientEmail,
        privateKey,
        _csrf: csrfToken
      })
    })
    .then(response => response.json())
    .then(data => {
      loadingDiv.classList.add('d-none');
      
      if (data.success) {
        successDiv.classList.remove('d-none');
        
        // Display success details if available
        if (data.detail) {
          const details = document.getElementById('test-success-details');
          if (details) {
            details.innerHTML = `
              <div class="mt-3 small">
                <div class="row">
                  <div class="col-md-6">
                    <ul class="list-unstyled mb-0">
                                           <li><strong>Project ID:</strong> ${escapeHtml(data.detail.projectId || 'N/A')}</li>
                       <li><strong>App Name:</strong> ${escapeHtml(data.detail.appName || 'N/A')}</li>
                     </ul>
                   </div>
                   <div class="col-md-6">
                     <ul class="list-unstyled mb-0">
                       <li><strong>Service Account:</strong> ${escapeHtml(data.detail.serviceAccountEmail || 'N/A')}</li>
                      <li><strong>Messaging API:</strong> 
                        <span class="badge ${data.detail.messagingAvailable ? 'bg-success' : 'bg-warning'}">
                          ${data.detail.messagingAvailable ? 'Available' : 'Not Available'}
                        </span>
                      </li>
                    </ul>
                  </div>
                </div>
              </div>
            `;
          }
        }
        
        if (FCM.accessibility?.announce) {
          FCM.accessibility.announce('Connection test successful');
        }
      } else {
        errorDiv.classList.remove('d-none');
        
        let errorMessage = data.message || 'Connection test failed';
        
        // Add additional error details if available
        if (data.detail) {
          if (data.detail.error) {
            errorMessage += `: ${data.detail.error}`;
          }
          
          // Display suggestions if available
          if (data.detail.suggestions && data.detail.suggestions.length > 0) {
            const suggestionsHtml = `
              <div class="mt-3">
                <strong>Suggestions:</strong>
                <ul class="small mt-2">
                  ${data.detail.suggestions.map(suggestion => `<li>${escapeHtml(suggestion)}</li>`).join('')}
                </ul>
              </div>
            `;
            document.getElementById('test-error-details').innerHTML = suggestionsHtml;
          }
        }
        
        document.getElementById('test-error-message').textContent = errorMessage;
        
        if (FCM.accessibility?.announce) {
          FCM.accessibility.announce('Connection test failed');
        }
      }
    })
    .catch(error => {
      console.error('Test connection error:', error);
      loadingDiv.classList.add('d-none');
      errorDiv.classList.remove('d-none');
      
      document.getElementById('test-error-message').textContent = 
        'Failed to test connection. Please check your network connection and try again.';
      
      if (FCM.accessibility?.announce) {
        FCM.accessibility.announce('Connection test error');
      }
    });
  }

  /**
   * Initialize form enhancements
   */
  function initFormEnhancements() {
    // Auto-format private key
    const privateKeyField = document.getElementById('privateKey');
    if (privateKeyField) {
      privateKeyField.addEventListener('paste', function(e) {
        setTimeout(() => {
          let value = this.value;
          // Clean up the private key format
          value = value.replace(/\\n/g, '\n');
          if (value !== this.value) {
            this.value = value;
            validateField(this);
          }
        }, 10);
      });
    }

    // Auto-dismiss alerts
    setTimeout(() => {
      document.querySelectorAll('.alert:not(.alert-permanent)').forEach(alert => {
        if (bootstrap.Alert) {
          const bsAlert = new bootstrap.Alert(alert);
          bsAlert.close();
        }
      });
    }, 8000);
  }

  // Keyboard shortcuts
  document.addEventListener('keydown', function(e) {
    // Ctrl/Cmd + Enter to submit form
    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
      const form = document.getElementById('add-account-form');
      if (form) {
        e.preventDefault();
        form.requestSubmit();
      }
    }
  });

})();
</script> 